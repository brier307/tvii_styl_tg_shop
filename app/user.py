import logging
from app.cart import *
from app.user_order import OrderManager
from app.database.requests import set_user
from app.cart import RedisCart
from app.database.products import ProductManager
from app.user_order import process_show_orders, process_orders_pagination, show_order_details
from app.user_keyboards import get_back_to_main_menu

product_manager = ProductManager()

user = Router()
cart = RedisCart()
order_manager = OrderManager(user)

logger = logging.getLogger(__name__)


@user.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –¥–∏–ø–ª–∏–Ω–∫–∏.
    –§–æ—Ä–º–∞—Ç –¥–∏–ø–ª–∏–Ω–∫–∞: https://t.me/bot?start=2000000048291
    –≥–¥–µ 2000000048291 - —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞.
    """
    try:
        user_id = message.from_user.id
        user_name = message.from_user.full_name
        await set_user(user_id, user_name)
        barcode = command.args

        if barcode:
            product_info = await product_manager.get_product_info_by_barcode(barcode)
            if product_info:
                name, price, available, article = product_info
                text = f"üì¶ {name}\n–ê—Ä—Ç–∏–∫—É–ª: {article}\nüí∞ —Ü—ñ–Ω–∞: {price:.2f} –≥—Ä–Ω.\nüìä –í –Ω–∞—è–≤–Ω–æ—Å—ñ: {available} —à—Ç.\n\n"
                text += "–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—à–∏–∫, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá"
                await message.answer(text, reply_markup=get_product_keyboard(barcode, in_cart=False))
                return

        await message.answer(
            f"üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!\n–û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ä–æ–∑–¥—ñ–ª",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cmd_start: {e}", exc_info=True)
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.")


@user.message(F.text)
async def handle_barcode(message: Message):
    try:
        barcode = message.text.strip()
        product_info = await product_manager.get_product_info_by_barcode(barcode)

        if product_info is None:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä—É –∑ —Ç–∞–∫–∏–º —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        name, price, available, article = product_info
        response = f"üì¶ {name}\n–ê—Ä—Ç–∏–∫—É–ª: {article}\n–®—Ç—Ä–∏—Ö-–∫–æ–¥: {barcode}\nüí∞ –¶–µ–Ω–∞: {price:.2f} –≥—Ä–Ω.\nüìä –í –Ω–∞–ª–∏—á–∏–∏: {available} —à—Ç."
        await message.answer(response, reply_markup=get_product_keyboard(barcode, in_cart=False))
    except Exception as e:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_barcode: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@user.callback_query(F.data == "show_catalog")
async def process_show_catalog(callback: CallbackQuery):
    await callback.message.edit_text(
        "üóÇ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
        reply_markup=get_catalog_keyboard()
    )


@user.callback_query(F.data == "show_support")
async def process_show_support(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞):",
        reply_markup=get_support_keyboard()
    )


@user.callback_query(F.data == "back_to_main")
async def process_back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        f"üëã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n"
        f"–í–∞—Å –≤—ñ—Ç–∞—î –º–∞–≥–∞–∑–∏–Ω \"–¢–≤—ñ–π –°—Ç–∏–ª—å\"\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=get_main_keyboard()
    )


@user.message(F.text)
async def handle_article(message: Message):
    try:
        article = message.text.strip()

        product_details = await product_manager.get_product_details(article)

        if product_details is None:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä—É –∑ —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        name = product_details["name"]
        article = product_details["article"]
        price = product_details["price"]
        specifications = product_details["specifications"]

        response = f"üì¶ {name}\n–ê—Ä—Ç–∏–∫—É–ª: {article}\nüí∞ –¶—ñ–Ω–∞: {price:.2f} –≥—Ä–Ω.\n\n"

        if len(specifications) > 1:
            response += "üóÇ –†–æ–∑–º—ñ—Ä–∏/–∫–æ–ª—å–æ—Ä–∏:\n"
            for spec in specifications:
                response += f"üîò {spec['specification']}\nüìä –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {spec['quantity']} —à—Ç.\n\n"
        else:
            spec = specifications[0]
            response += f"üìä –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {spec['quantity']} —à—Ç.\n"

        await message.answer(response)

    except Exception as e:
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        print(f"–ü–æ–º–∏–ª–∫–∞ —É handle_article: {e}")


@user.callback_query(F.data.startswith("add_to_cart_"))
async def process_add_to_cart(callback: CallbackQuery):
    try:
        barcode = callback.data.replace("add_to_cart_", "")
        product_info = await product_manager.get_product_info_by_barcode(barcode)
        if not product_info:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        name, price, available, article = product_info
        if available <= 0:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π", show_alert=True)
            return

        current_cart = await cart.get_cart(callback.from_user.id)
        current_quantity = current_cart.get(barcode, 0) if current_cart else 0

        if current_quantity >= available:
            await callback.answer(f"‚ùå –ö –∫–æ—à–∏–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É ({available} —à—Ç.)", show_alert=True)
            return
        if current_quantity >= 999:
            await callback.answer("‚ùå –ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ 999 –æ–¥–∏–Ω–∏—Ü—å —Ç–æ–≤–∞—Ä—É", show_alert=True)
            return

        success, msg = await cart.add_item_to_cart(callback.from_user.id, barcode)
        if success:
            text = f"üì¶ {name}\n–ê—Ä—Ç–∏–∫—É–ª: {article}\nüí∞ –¶—ñ–Ω–∞: {price:.2f} –≥—Ä–Ω.\nüìä –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {available} —à—Ç.\n\n‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫!"
            updated_cart = await cart.get_cart(callback.from_user.id)
            item_quantity = updated_cart.get(barcode, 0)
            if item_quantity > 0:
                text += f"\nüõí –í –∫–æ—à–∏–∫—É: {item_quantity} —à—Ç."
            await callback.message.edit_text(text, reply_markup=get_product_keyboard(barcode, True))
            await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫!")
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É.", show_alert=True)
    except Exception as e:
        print(f"Error adding product to cart: {e}")
        await callback.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@user.callback_query(F.data == "show_cart")
async def process_show_cart(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        await cart.ensure_connection()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cart = await cart.get_cart(callback.from_user.id)

        if not user_cart:
            await callback.message.edit_text(
                "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n"
                "–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É üìã",
                reply_markup=get_cart_keyboard(has_items=False)  # –ü–µ—Ä–µ–¥–∞–µ–º False –¥–ª—è –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_text = await format_cart_content(user_cart, callback.from_user.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
        await callback.message.edit_text(
            cart_text,
            reply_markup=get_cart_keyboard(has_items=True)  # –ü–µ—Ä–µ–¥–∞–µ–º True –¥–ª—è –Ω–µ–ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã
        )

    except Exception as e:
        logger.error(f"Error showing cart: {e}")
        await callback.message.edit_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
            reply_markup=get_back_to_main_menu()  # –í—Å–µ–≥–¥–∞ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@user.callback_query(F.data == "back_to_main")
async def process_back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@user.callback_query(F.data == "clear_cart")
async def process_clear_cart(callback: CallbackQuery):
    try:
        success, msg = await cart.clear_cart(callback.from_user.id)

        if success:
            await callback.message.edit_text(
                "üõí –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ\n\n"
                "–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É üìã",
                reply_markup=get_cart_keyboard(has_items=False)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã
            )
            await callback.answer("‚úÖ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞")

    except Exception as e:
        logger.error(f"Error clearing cart: {e}")
        await callback.message.edit_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
            reply_markup=get_back_to_main_menu()  # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞")


@user.callback_query(F.data.startswith("increase_"))
async def process_increase_quantity(callback: CallbackQuery):
    article = callback.data.replace("increase_", "")

    try:
        user_cart = await cart.get_cart(callback.from_user.id)
        if not user_cart or article not in user_cart:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ—à–∏–∫—É")
            return

        current_quantity = user_cart[article]
        product_info = await product_manager.get_product_info(article)

        if not product_info:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
            return

        name, price, available = product_info

        if current_quantity >= available:
            await callback.answer(
                f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç.",
                show_alert=True
            )
            return

        if current_quantity >= 10:
            await callback.answer(
                "‚ùå –ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ 10 –æ–¥–∏–Ω–∏—Ü—å —Ç–æ–≤–∞—Ä—É",
                show_alert=True
            )
            return

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        success, msg = await cart.update_quantity(
            callback.from_user.id,
            article,
            current_quantity + 1
        )

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
            user_cart = await cart.get_cart(callback.from_user.id)
            cart_text = await format_cart_content(user_cart, callback.from_user.id)

            await callback.message.edit_text(
                cart_text,
                reply_markup=get_cart_keyboard(True)
            )
            await callback.answer("‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±—ñ–ª—å—à–µ–Ω–æ")
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ")

    except Exception as e:
        logger.error(f"Error increasing quantity: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@user.callback_query(F.data.startswith("decrease_"))
async def process_decrease_quantity(callback: CallbackQuery):
    article = callback.data.replace("decrease_", "")

    try:
        user_cart = await cart.get_cart(callback.from_user.id)
        if not user_cart or article not in user_cart:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ—à–∏–∫—É")
            return

        current_quantity = user_cart[article]

        if current_quantity <= 1:
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 1 –∏–ª–∏ –º–µ–Ω—å—à–µ, —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            success, msg = await cart.remove_item(callback.from_user.id, article)
        else:
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            success, msg = await cart.update_quantity(
                callback.from_user.id,
                article,
                current_quantity - 1
            )

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
            user_cart = await cart.get_cart(callback.from_user.id)
            if not user_cart:  # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                await callback.message.edit_text(
                    "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n"
                    "–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É üìã",
                    reply_markup=get_main_keyboard()
                )
            else:
                cart_text = await format_cart_content(user_cart, callback.from_user.id)
                await callback.message.edit_text(
                    cart_text,
                    reply_markup=get_cart_keyboard(True)
                )
            await callback.answer("‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º–µ–Ω—à–µ–Ω–æ")
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ")

    except Exception as e:
        logger.error(f"Error decreasing quantity: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
@user.callback_query(F.data == "clear_cart")
async def process_clear_cart(callback: CallbackQuery):
    try:
        success, msg = await cart.clear_cart(callback.from_user.id)

        if success:
            await callback.message.edit_text(
                "üõí –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ\n\n"
                "–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É üìã",
                reply_markup=get_main_keyboard()
            )
            await callback.answer("‚úÖ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞")

    except Exception as e:
        logger.error(f"Error clearing cart: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞")


@user.callback_query(F.data.startswith("remove_from_cart_"))
async def process_remove_from_cart(callback: CallbackQuery):
    try:
        barcode = callback.data.replace("remove_from_cart_", "")
        success, msg = await cart.remove_item(callback.from_user.id, barcode)
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω
            product_info = await product_manager.get_product_info_by_barcode(barcode)
            if product_info:
                name, price, available, article = product_info
                text = f"üì¶ {name}\n–ê—Ä—Ç–∏–∫—É–ª: {article}\nüí∞ –¶–µ–Ω–∞: {price:.2f} –≥—Ä–Ω.\nüìä –í –Ω–∞–ª–∏—á–∏–∏: {available} —à—Ç.\n\n‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!"
                await callback.message.edit_text(text, reply_markup=get_product_keyboard(barcode, False))
            await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Error removing item from cart: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)


@user.callback_query(F.data == "delete_items")
async def show_delete_items_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤."""
    try:
        user_cart = await cart.get_cart(callback.from_user.id)
        if not user_cart:
            await callback.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π", show_alert=True)
            return

        items_list = []
        for barcode, _ in user_cart.items():
            product_info = await product_manager.get_product_info_by_barcode(barcode)
            if product_info:
                name, _, _, _ = product_info
                items_list.append((barcode, name))

        await callback.message.edit_text(
            "üóë –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
            reply_markup=get_delete_items_keyboard(items_list)
        )
    except Exception as e:
        logger.error(f"Error showing delete items menu: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@user.callback_query(F.data.startswith("delete_item_"))
async def delete_specific_item(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        article = callback.data.replace("delete_item_", "")
        success, msg = await cart.remove_item(callback.from_user.id, article)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
            user_cart = await cart.get_cart(callback.from_user.id)

            if not user_cart:
                # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                await callback.message.edit_text(
                    "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n"
                    "–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É üìã",
                    reply_markup=get_cart_keyboard(has_items=False)
                )
            else:
                # –ï—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–≤–∞—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                text = "üóë –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n"
                items_list = []

                for cart_article, quantity in user_cart.items():
                    product_info = await product_manager.get_product_info(cart_article)
                    if product_info:
                        name, price, _ = product_info
                        text += (
                            f"üì¶ {name}\n"
                            f"–ê—Ä—Ç–∏–∫—É–ª: {cart_article}\n"
                            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity} —à—Ç.\n"
                            f"–¶—ñ–Ω–∞: {price:.2f} –≥—Ä–Ω. x {quantity} = {price * quantity:.2f} –≥—Ä–Ω.\n"
                            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                        )
                        items_list.append((cart_article, name))

                text += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Ç–æ–≤–∞—Ä, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:"

                await callback.message.edit_text(
                    text,
                    reply_markup=get_delete_items_keyboard(items_list)
                )

            await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞")
        else:
            await callback.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É",
                show_alert=True
            )

    except Exception as e:
        logger.error(f"Error deleting specific item: {e}")
        await callback.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É",
            show_alert=True
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–æ—Ä–∑–∏–Ω—ã
@user.callback_query(F.data == "back_to_cart")
async def back_to_cart(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ—à–∏–∫–∞."""
    await process_show_cart(callback)


@user.callback_query(F.data == "change_quantities")
async def show_quantity_change_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤."""
    user_cart = await cart.get_cart(callback.from_user.id)
    if not user_cart:
        await callback.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π", show_alert=True)
        return
    await update_quantity_menu(callback)


async def update_quantity_menu(callback: CallbackQuery, success_message: str = None):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω—é –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ."""
    try:
        user_cart = await cart.get_cart(callback.from_user.id)
        if not user_cart:
            # –Ø–∫—â–æ –∫–æ—à–∏–∫ —Å–ø–æ—Ä–æ–∂–Ω—ñ–≤, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ—à–∏–∫–∞
            await process_show_cart(callback)
            return

        items_info = []
        for barcode, quantity in user_cart.items():
            product_info = await product_manager.get_product_info_by_barcode(barcode)
            if product_info:
                name, _, available, _ = product_info
                items_info.append({
                    'barcode': barcode,
                    'name': name,
                    'quantity': quantity,
                    'available': available
                })

        await callback.message.edit_text(
            "üìù –ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤:",
            reply_markup=get_quantity_change_keyboard(items_info)
        )
        if success_message:
            await callback.answer(success_message)
    except Exception as e:
        logger.error(f"Error updating quantity menu: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ–Ω—é")


@user.callback_query(F.data.startswith("qty_increase_"))
async def quantity_increase(callback: CallbackQuery):
    """–ó–±—ñ–ª—å—à—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É."""
    barcode = callback.data.replace("qty_increase_", "")
    user_cart = await cart.get_cart(callback.from_user.id)
    current_quantity = user_cart.get(barcode, 0)

    product_info = await product_manager.get_product_info_by_barcode(barcode)
    if not product_info:
        await callback.answer("–¢–æ–≤–∞—Ä –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π", show_alert=True)
        return

    _, _, available, _ = product_info

    if current_quantity >= available:
        await callback.answer(f"–ë—ñ–ª—å—à–µ –¥–æ–¥–∞—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ. –î–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç.", show_alert=True)
        return

    success, _ = await cart.update_item_quantity(callback.from_user.id, barcode, current_quantity + 1)
    if success:
        await update_quantity_menu(callback, "‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±—ñ–ª—å—à–µ–Ω–æ")


@user.callback_query(F.data.startswith("qty_decrease_"))
async def quantity_decrease(callback: CallbackQuery):
    """–ó–º–µ–Ω—à—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É."""
    barcode = callback.data.replace("qty_decrease_", "")
    user_cart = await cart.get_cart(callback.from_user.id)
    current_quantity = user_cart.get(barcode, 0)

    if current_quantity <= 1:
        await callback.answer("–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
        return

    success, _ = await cart.update_item_quantity(callback.from_user.id, barcode, current_quantity - 1)
    if success:
        await update_quantity_menu(callback, "‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º–µ–Ω—à–µ–Ω–æ")


@user.callback_query(F.data == "quantity_info")
async def show_quantity_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞"""
    await callback.answer(
        "–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å / –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥—ñ",
        show_alert=True
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
@user.callback_query(F.data == "show_orders")
async def handle_show_orders(callback: CallbackQuery):
    await process_show_orders(callback)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∑–∞–∫–∞–∑–æ–≤
@user.callback_query(F.data.startswith("orders_page:"))
async def handle_orders_pagination(callback: CallbackQuery):
    await process_orders_pagination(callback)


# –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
@user.callback_query(F.data.startswith("order_details:"))
async def handle_order_details(callback: CallbackQuery):
    await show_order_details(callback)
