from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Tuple
from app.database.models import OrderStatus


def get_main_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:
    - –ö–∞—Ç–∞–ª–æ–≥
    - –ö–æ—Ä–∑–∏–Ω–∞
    - –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    - –ü—ñ–¥—Ç—Ä–∏–º–∫–∞
    """
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ Builder
    #builder.button(text="üóÇ –ö–∞—Ç–∞–ª–æ–≥", callback_data="show_catalog")
    builder.button(text="üõí –ö–æ—à–∏–∫", callback_data="show_cart")
    builder.button(text="üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="show_orders")
    builder.button(text="üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="show_support")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (2 –≤ —Ä—è–¥)
    builder.adjust(2)

    return builder.as_markup()


def get_back_to_main_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()

    builder.button(
        text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        callback_data="back_to_main"
    )

    return builder.as_markup()


def get_catalog_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    builder = InlineKeyboardBuilder()

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    builder.button(text="üëï –û–¥—è–≥", callback_data="category_clothes")
    builder.button(text="üëû –í–∑—É—Ç—Ç—è", callback_data="category_shoes")
    builder.button(text="üëú –ê–∫—Å–µ—Å—É–∞—Ä–∏", callback_data="category_accessories")

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(text="‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")

    # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    builder.adjust(2, 2, 1)

    return builder.as_markup()


def get_cart_keyboard(has_items: bool = True) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if has_items:
        builder.button(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout")
        builder.button(text="üìù –ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", callback_data="change_quantities")
        builder.button(text="‚úÇÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏", callback_data="delete_items")
        builder.button(text="üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")
    #builder.button(text="üìã –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="show_catalog")
    builder.button(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(1)
    return builder.as_markup()


def get_product_keyboard(barcode: str, in_cart: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
    Args:
        barcode (str): –®—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞.
        in_cart (bool): –ï—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    builder = InlineKeyboardBuilder()
    if in_cart:
        builder.button(
            text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∫–æ—à–∏–∫–∞",
            callback_data=f"remove_from_cart_{barcode}"
        )
        builder.button(text="üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data="show_cart")
    else:
        builder.button(
            text="üõí –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞",
            callback_data=f"add_to_cart_{barcode}"
        )
    #builder.button(text="üìã –î–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="show_catalog")
    builder.button(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(1)
    return builder.as_markup()


def get_order_keyboard(order_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"order_details_{order_id}")
    builder.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"cancel_order_{order_id}")
    builder.button(text="‚óÄÔ∏è –î–æ —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data="show_orders")
    builder.button(text="‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")

    # –ö–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.adjust(1)

    return builder.as_markup()


def get_support_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚ùì –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="faq")
    builder.button(text="‚óÄÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")

    # –ö–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.adjust(1)

    return builder.as_markup()


def get_delete_items_keyboard(items: List[Tuple[str, str]]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.
    Args:
        items: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—à—Ç—Ä–∏—Ö-–∫–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ) —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    builder = InlineKeyboardBuilder()
    for barcode, name in items:
        short_name = name[:30] + "..." if len(name) > 30 else name
        builder.button(
            text=f"‚ùå {short_name}",
            callback_data=f"delete_item_{barcode}"
        )
    builder.button(text="üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ—à–∏–∫–∞", callback_data="back_to_cart")
    builder.adjust(1)
    return builder.as_markup()


def get_back_to_cart_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–æ—Ä–∑–∏–Ω–µ"""
    builder = InlineKeyboardBuilder()

    builder.button(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ—à–∏–∫–∞",
        callback_data="back_to_cart"
    )

    return builder.as_markup()


def get_quantity_change_keyboard(items_info: List[dict]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    Args:
        items_info: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö (–≤–∫–ª—é—á–∞—è barcode).
    """
    keyboard = []
    for item in items_info:
        name_row = [InlineKeyboardButton(text=f"üì¶ {item['name'][:30]}...", callback_data=f"qinfo_{item['barcode']}")]
        quantity_row = [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"qty_decrease_{item['barcode']}"),
            InlineKeyboardButton(text=f"{item['quantity']}/{item['available']}", callback_data="quantity_info"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"qty_increase_{item['barcode']}")
        ]
        keyboard.append(name_row)
        keyboard.append(quantity_row)
    back_row = [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ—à–∏–∫–∞", callback_data="back_to_cart")]
    keyboard.append(back_row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_orders_keyboard(orders, page, total_pages):
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.

    Args:
        orders (List[Order]): –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å
        page (int): –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        total_pages (int): –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    """
    builder = InlineKeyboardBuilder()

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å —É —Å—Ç–æ–≤–ø—á–∏–∫
    for order in orders:
        status_uk = OrderStatus(order.status).get_uk_description()  # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
        builder.button(
            text=f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} - {status_uk}",
            callback_data=f"order_details:{order.id}"
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó (–≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫)
    navigation_buttons = []

    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è",
                callback_data=f"orders_page:{page - 1}"
            )
        )

    if page < total_pages:
        navigation_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞",
                callback_data=f"orders_page:{page + 1}"
            )
        )

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∏ —î
    if navigation_buttons:
        builder.row(*navigation_buttons)

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (–≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É)
    builder.button(
        text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        callback_data="back_to_main"
    )

    builder.adjust(1)  # –í—Å—ñ –∫–Ω–æ–ø–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å —É —Å—Ç–æ–≤–ø—á–∏–∫
    return builder.as_markup()


def get_back_to_main_menu() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        callback_data="back_to_main"
    )
    return builder.as_markup()


def get_back_to_orders_menu() -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –∑–∞–º–æ–≤–ª–µ–Ω—å.
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="show_orders"
    )
    return builder.as_markup()
