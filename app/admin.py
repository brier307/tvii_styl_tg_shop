import json
import re
from math import ceil
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, CommandStart, Command
from app.admin_keyboards import *
from app.database.requests import get_all_orders, get_orders_by_status, get_order, update_order_status
from app.database.products import ProductManager
from app.database.models import OrderStatus
from app.states import AdminOrderStates
from config import ADMIN
import logging

admin = Router()
ORDERS_PER_PAGE = 10  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –æ–¥–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ

logger = logging.getLogger(__name__)


class Admin(Filter):
    def __init__(self):
        self.admins = ADMIN

    async def __call__(self, message: Message):
        return message.from_user.id in self.admins
    

@admin.message(F.text == "/menu")
async def cmd_menu(message: Message):
    await message.answer('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=get_admin_main_menu())


@admin.callback_query(F.data == "admin_main_menu")
async def show_admin_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await callback.message.edit_text(
        "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_main_menu()
    )


@admin.callback_query(F.data == "admin_orders_menu")
async def show_orders_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await callback.message.edit_text(
        "–ú–µ–Ω—é –∑–∞–º–æ–≤–ª–µ–Ω—å:",
        reply_markup=get_orders_menu_keyboard()
    )


@admin.callback_query(F.data == "admin_all_orders")
async def show_all_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    orders = await get_all_orders()

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=get_back_to_main_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_page:"))
async def process_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö —É—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."""
    orders = await get_all_orders()
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=keyboard
    )


@admin.callback_query(F.data == "admin_orders_status:new")
async def show_new_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new'."""
    orders = await get_orders_by_status("new")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í –æ–±—Ä–æ–±—Ü—ñ'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í –æ–±—Ä–æ–±—Ü—ñ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_new_orders_page:"))
async def process_new_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new'."""
    orders = await get_orders_by_status("new")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:confirmed"))
async def show_confirmed_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'."""
    orders = await get_orders_by_status("confirmed")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_confirmed_orders_page:"))
async def process_confirmed_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'."""
    orders = await get_orders_by_status("confirmed")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:shipped"))
async def show_shipped_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("shipped")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üöö –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_shipped_orders_page:"))
async def process_shipped_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("shipped")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üöö –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:delivered"))
async def show_delivered_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("delivered")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_delivered_orders_page:"))
async def process_delivered_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("delivered")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:cancelled_by_admin"))
async def show_cancelled_by_admin_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'."""
    orders = await get_orders_by_status("cancelled_by_admin")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_cancelled_by_admin_orders_page:"))
async def process_cancelled_by_admin_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'."""
    orders = await get_orders_by_status("cancelled_by_admin")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:cancelled_by_user"))
async def show_cancelled_by_user_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º'."""
    orders = await get_orders_by_status("cancelled_by_user")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_cancelled_by_user_orders_page:"))
async def process_cancelled_by_user_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º'."""
    orders = await get_orders_by_status("cancelled_by_user")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_order_details:"))
async def show_admin_order_details(callback: CallbackQuery):
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.
    """
    try:
        order_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ —Ç—É—Ç, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=get_back_to_orders_menu()  # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å
        )
        await callback.answer()
        return

    order = await get_order(order_id)

    if not order:
        await callback.message.edit_text(
            "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_back_to_orders_menu()
        )
        await callback.answer()
        return

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ ProductManager
    product_manager_instance = ProductManager()

    try:
        items_dict = json.loads(order.articles)
    except json.JSONDecodeError:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—ñ–≤ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.",
            reply_markup=get_order_details_keyboard(order_id)  # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –¥–µ—Ç–∞–ª–µ–π –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
        )
        await callback.answer()
        return

    items_text_list = []
    for barcode, quantity in items_dict.items():
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–æ—à—É–∫ –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É
        product_info = await product_manager_instance.get_product_info_by_barcode(barcode)
        product_name = product_info[0] if product_info else f"–®—Ç—Ä–∏—Ö-–∫–æ–¥ {barcode}"
        article = product_info[3] if product_info else "N/A"  # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        items_text_list.append(f"- {product_name} (–ê—Ä—Ç: {article}, –®–ö: {barcode}): {quantity} —à—Ç.")

    items_text = "\n".join(items_text_list) if items_text_list else "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—è."

    # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order_details_message = f"üì¶ <b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b>:\n\n"
    order_details_message += f"üìÖ <b>–î–∞—Ç–∞:</b> {order.date.strftime('%Y-%m-%d %H:%M:%S')}\n"
    order_details_message += f"üë§ <b>–û—Ç—Ä–∏–º—É–≤–∞—á:</b> {order.name}\n"
    order_details_message += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}\n\n"
    order_details_message += f"üõí <b>–¢–æ–≤–∞—Ä–∏:</b>\n{items_text}\n\n"
    order_details_message += f"üí∞ <b>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order.total_price:.2f} –≥—Ä–Ω\n"

    # –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä, —è–∫—â–æ –≤—ñ–Ω —î
    if order.comment and order.comment.strip():  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
        order_details_message += f"üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –∫–ª—ñ—î–Ω—Ç–∞:</b> {order.comment}\n"

    if order.tracking_number:
        order_details_message += f"üî¢ <b>–ù–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:</b> {order.tracking_number}\n"


    order_details_message += f"\nüí≥ <b>–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b> {order.payment_method}\n"
    order_details_message += f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order.delivery}\n"
    order_details_message += f"üìç <b>–ê–¥—Ä–µ—Å–∞:</b> {order.address}\n"
    order_details_message += f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus(order.status).get_uk_description()}"

    await callback.message.edit_text(
        order_details_message,
        reply_markup=get_order_details_keyboard(order_id),
        parse_mode="HTML"  # –í–∞–∂–ª–∏–≤–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è <b> —Ç–µ–≥—ñ–≤
    )
    await callback.answer()


@admin.callback_query(F.data.startswith("edit_order_status:"))
async def edit_order_status(callback: CallbackQuery):
    """
    –í–∏–≤–æ–¥–∏—Ç—å –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    """
    order_id = int(callback.data.split(":")[1])
    keyboard = get_change_status_keyboard(order_id)

    await callback.message.edit_text(
        f"‚úèÔ∏è –û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}:",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("change_order_status:"))
async def change_order_status(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏–Ω–≥-–Ω–æ–º–µ—Ä.
    """
    try:
        _, order_id_str, new_status_value = callback.data.split(":")
        order_id = int(order_id_str)
        new_status = OrderStatus(new_status_value)

        if new_status == OrderStatus.SHIPPED:
            await state.update_data(order_id=order_id)
            await state.set_state(AdminOrderStates.EnterTrackingNumber)
            await callback.message.edit_text(
                f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è (–¢–¢–ù) –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}:",
                reply_markup=get_cancel_tracking_input_keyboard(order_id)
            )
            await callback.answer()
            return

        updated_order = await update_order_status(order_id, new_status)

        if not updated_order:
            await callback.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
            return

        user_id = updated_order.tg_id
        status_description = OrderStatus(new_status).get_uk_description()
        notification_message = f"–°—Ç–∞—Ç—É—Å –í–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {status_description}"
        await callback.bot.send_message(chat_id=user_id, text=notification_message)

        # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–≥–ª—è–¥ –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
        # –ó–∞–º—ñ—Å—Ç—å –∑–º—ñ–Ω–∏ callback.data, –≤—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–≥—ñ–∫—É show_admin_order_details
        await show_admin_order_details(callback)

    except Exception as e:
        # –£–Ω–∏–∫–∞—î–º–æ –ø–æ–º–∏–ª–∫–∏ MESSAGE_TOO_LONG, –Ω–∞–¥—Å–∏–ª–∞—é—á–∏ –∫–æ—Ä–æ—Ç–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        print(f"Error in change_order_status: {e}")  # –î–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        await callback.answer(f"‚ö†Ô∏è –í—ñ–¥–±—É–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –î–∏–≤. –∫–æ–Ω—Å–æ–ª—å.", show_alert=True)


@admin.callback_query(F.data.startswith("cancel_tracking_input:"))
async def cancel_tracking_input(callback: CallbackQuery, state: FSMContext):
    """
    –°–∫–∞—Å–æ–≤—É—î –≤–≤–µ–¥–µ–Ω–Ω—è —Ç—Ä–µ–∫—ñ–Ω–≥-–Ω–æ–º–µ—Ä–∞, –æ—á–∏—â—É—î —Å—Ç–∞–Ω —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–æ –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    """
    await state.clear()
    await show_admin_order_details(callback)


@admin.message(AdminOrderStates.EnterTrackingNumber, F.text)
async def process_tracking_number(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç—Ä–µ–∫–∏–Ω–≥-–Ω–æ–º–µ—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        data = await state.get_data()
        order_id = data.get("order_id")

        if not order_id:
            await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
            await state.clear()
            return

        tracking_number_str = message.text.strip()
        if not tracking_number_str.isdigit():
            await message.answer("–ù–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return

        tracking_number = int(tracking_number_str)

        updated_order = await update_order_status(order_id, OrderStatus.SHIPPED, tracking_number)

        if not updated_order:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
            await state.clear()
            return

        await state.clear()

        user_id = updated_order.tg_id
        status_description = OrderStatus.SHIPPED.get_uk_description()
        notification_message = (
            f"–°—Ç–∞—Ç—É—Å –í–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {status_description}.\n"
            f"üöö –í–∞—à –Ω–æ–º–µ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è (–¢–¢–ù): {tracking_number}"
        )
        await message.bot.send_message(chat_id=user_id, text=notification_message)

        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ', –Ω–æ–º–µ—Ä –¢–¢–ù –¥–æ–¥–∞–Ω–æ.")

        # –ü–æ–∫–∞–∑—É—î–º–æ –∞–¥–º—ñ–Ω—É –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        product_manager_instance = ProductManager()
        articles_dict = json.loads(updated_order.articles)
        items_text_list = []
        for article_code, quantity in articles_dict.items():
            product_info = await product_manager_instance.get_product_info(article_code)
            product_name = product_info[0] if product_info else f"–ê—Ä—Ç–∏–∫—É–ª {article_code}"
            items_text_list.append(f"- {product_name} (–ê—Ä—Ç: {article_code}): {quantity} —à—Ç.")
        items_text = "\n".join(items_text_list)

        order_details_message = f"üì¶ <b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{updated_order.id}</b>:\n\n"
        order_details_message += f"üìÖ <b>–î–∞—Ç–∞:</b> {updated_order.date.strftime('%Y-%m-%d %H:%M:%S')}\n"
        order_details_message += f"üë§ <b>–û—Ç—Ä–∏–º—É–≤–∞—á:</b> {updated_order.name}\n"
        order_details_message += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {updated_order.phone}\n\n"
        order_details_message += f"üõí <b>–¢–æ–≤–∞—Ä–∏:</b>\n{items_text}\n\n"
        order_details_message += f"üí∞ <b>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {updated_order.total_price:.2f} –≥—Ä–Ω\n"

        if updated_order.comment and updated_order.comment.strip():
            order_details_message += f"üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –∫–ª—ñ—î–Ω—Ç–∞:</b> {updated_order.comment}\n"

        if updated_order.tracking_number:
            order_details_message += f"üî¢ <b>–ù–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:</b> {updated_order.tracking_number}\n"

        order_details_message += f"\nüí≥ <b>–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b> {updated_order.payment_method}\n"
        order_details_message += f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {updated_order.delivery}\n"
        order_details_message += f"üìç <b>–ê–¥—Ä–µ—Å–∞:</b> {updated_order.address}\n"
        order_details_message += f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus(updated_order.status).get_uk_description()}"

        await message.answer(
            order_details_message,
            reply_markup=get_order_details_keyboard(order_id),
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –í—ñ–¥–±—É–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")
    finally:
        await state.clear()


@admin.callback_query(F.data == "admin_generate_deeplinks")
async def ask_for_article(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Ç—É—î —É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Å–∏–ª–∞–Ω—å."""
    await state.set_state(AdminOrderStates.GenerateDeeplink)
    await callback.message.edit_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É, –¥–ª—è —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.",
        reply_markup=get_back_to_main_menu()
    )
    await callback.answer()


@admin.message(AdminOrderStates.GenerateDeeplink, F.text)
async def generate_deeplinks(message: Message, state: FSMContext, bot: Bot):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥—ñ–ø–ª—ñ–Ω–∫–∏ –¥–ª—è –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª—É."""
    await state.clear()
    article = message.text.strip()

    product_manager = ProductManager()
    barcodes_info = await product_manager.get_barcodes_by_article(article)

    if not barcodes_info:
        await message.answer(
            f"‚ùå –¢–æ–≤–∞—Ä –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º `{article}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –¥–ª—è –Ω—å–æ–≥–æ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∏.",
            parse_mode="Markdown",
            reply_markup=get_admin_main_menu()
        )
        return

    try:
        me = await bot.get_me()
        bot_username = me.username

        deeplinks = []
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –∑–∞–º—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—É
        size_counter = 1
        for barcode, name in barcodes_info:
            link = f"https://t.me/{bot_username}?start={barcode}"
            # –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ "–†–æ–∑–º—ñ—Ä 1", "–†–æ–∑–º—ñ—Ä 2" —ñ —Ç.–¥.
            deeplinks.append(f"–†–æ–∑–º—ñ—Ä {size_counter} - {link}")
            size_counter += 1

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ª–µ–≥–∫–æ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏
        final_links_str = "\n".join(deeplinks)
        response_text = f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª—É `{article}`:\n\n`{final_links_str}`"


        await message.answer(
            response_text,
            parse_mode="Markdown",
            )

        await message.answer(
            "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_main_menu()
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥—ñ–ø–ª—ñ–Ω–∫—ñ–≤: {e}", exc_info=True)
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Å–∏–ª–∞–Ω—å.")


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∑—ñ —Å—Ç–∞–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
@admin.callback_query(AdminOrderStates.GenerateDeeplink, F.data == "admin_main_menu")
async def back_to_main_menu_from_deeplink(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑—ñ —Å—Ç–∞–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥—ñ–ø–ª—ñ–Ω–∫—ñ–≤."""
    await state.clear()
    await callback.message.edit_text(
        "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
    )
    await callback.answer()
