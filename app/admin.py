import json
from math import ceil
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, CommandStart, Command
from app.admin_keyboards import *
from app.database.requests import get_all_orders, get_orders_by_status, get_order, update_order_status
from app.database.products import ProductManager
from app.database.models import OrderStatus
from config import ADMIN

admin = Router()
ORDERS_PER_PAGE = 10  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –æ–¥–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ


class Admin(Filter):
    def __init__(self):
        self.admins = ADMIN

    async def __call__(self, message: Message):
        return message.from_user.id in self.admins
    

@admin.message(F.text == "/menu")
async def cmd_menu(message: Message):
    await message.answer('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=get_admin_main_menu())


@admin.callback_query(F.data == "admin_main_menu")
async def show_admin_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await callback.message.edit_text(
        "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_main_menu()
    )


@admin.callback_query(F.data == "admin_orders_menu")
async def show_orders_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await callback.message.edit_text(
        "–ú–µ–Ω—é –∑–∞–º–æ–≤–ª–µ–Ω—å:",
        reply_markup=get_orders_menu_keyboard()
    )


@admin.callback_query(F.data == "admin_all_orders")
async def show_all_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    orders = await get_all_orders()

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=get_back_to_main_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_page:"))
async def process_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö —É—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."""
    orders = await get_all_orders()
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=keyboard
    )


@admin.callback_query(F.data == "admin_orders_status:new")
async def show_new_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new'."""
    orders = await get_orders_by_status("new")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í –æ–±—Ä–æ–±—Ü—ñ'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í –æ–±—Ä–æ–±—Ü—ñ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_new_orders_page:"))
async def process_new_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new'."""
    orders = await get_orders_by_status("new")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:confirmed"))
async def show_confirmed_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'."""
    orders = await get_orders_by_status("confirmed")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_confirmed_orders_page:"))
async def process_confirmed_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'."""
    orders = await get_orders_by_status("confirmed")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:shipped"))
async def show_shipped_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("shipped")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üöö –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_shipped_orders_page:"))
async def process_shipped_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("shipped")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üöö –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:delivered"))
async def show_delivered_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("delivered")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_delivered_orders_page:"))
async def process_delivered_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("delivered")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:cancelled_by_admin"))
async def show_cancelled_by_admin_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'."""
    orders = await get_orders_by_status("cancelled_by_admin")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_cancelled_by_admin_orders_page:"))
async def process_cancelled_by_admin_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'."""
    orders = await get_orders_by_status("cancelled_by_admin")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:cancelled_by_user"))
async def show_cancelled_by_user_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º'."""
    orders = await get_orders_by_status("cancelled_by_user")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_cancelled_by_user_orders_page:"))
async def process_cancelled_by_user_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º'."""
    orders = await get_orders_by_status("cancelled_by_user")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_order_details:"))
async def show_admin_order_details(callback: CallbackQuery):
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.
    """
    try:
        order_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ —Ç—É—Ç, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=get_back_to_orders_menu()  # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å
        )
        await callback.answer()
        return

    order = await get_order(order_id)

    if not order:
        await callback.message.edit_text(
            "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_back_to_orders_menu()
        )
        await callback.answer()
        return

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ ProductManager
    product_manager_instance = ProductManager()

    try:
        articles_dict = json.loads(order.articles)
    except json.JSONDecodeError:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—ñ–≤ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.",
            reply_markup=get_order_details_keyboard(order_id)  # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –¥–µ—Ç–∞–ª–µ–π –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
        )
        await callback.answer()
        return

    items_text_list = []
    for article_code, quantity in articles_dict.items():
        product_info = product_manager_instance.get_product_info(article_code)
        product_name = product_info[0] if product_info else f"–ê—Ä—Ç–∏–∫—É–ª {article_code}"
        items_text_list.append(f"- {product_name} (–ê—Ä—Ç: {article_code}): {quantity} —à—Ç.")

    items_text = "\n".join(items_text_list) if items_text_list else "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—è."

    # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order_details_message = f"üì¶ <b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b>:\n\n"
    order_details_message += f"üìÖ <b>–î–∞—Ç–∞:</b> {order.date.strftime('%Y-%m-%d %H:%M:%S')}\n"
    order_details_message += f"üë§ <b>–û—Ç—Ä–∏–º—É–≤–∞—á:</b> {order.name}\n"
    order_details_message += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}\n\n"
    order_details_message += f"üõí <b>–¢–æ–≤–∞—Ä–∏:</b>\n{items_text}\n\n"
    order_details_message += f"üí∞ <b>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order.total_price:.2f} –≥—Ä–Ω\n"

    # –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä, —è–∫—â–æ –≤—ñ–Ω —î
    if order.comment and order.comment.strip():  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
        order_details_message += f"üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –∫–ª—ñ—î–Ω—Ç–∞:</b> {order.comment}\n"

    order_details_message += f"\nüí≥ <b>–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b> {order.payment_method}\n"
    order_details_message += f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order.delivery}\n"
    order_details_message += f"üìç <b>–ê–¥—Ä–µ—Å–∞:</b> {order.address}\n"
    order_details_message += f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus(order.status).get_uk_description()}"

    await callback.message.edit_text(
        order_details_message,
        reply_markup=get_order_details_keyboard(order_id),
        parse_mode="HTML"  # –í–∞–∂–ª–∏–≤–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è <b> —Ç–µ–≥—ñ–≤
    )
    await callback.answer()


@admin.callback_query(F.data.startswith("edit_order_status:"))
async def edit_order_status(callback: CallbackQuery):
    """
    –í–∏–≤–æ–¥–∏—Ç—å –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    """
    order_id = int(callback.data.split(":")[1])  # –û—Ç—Ä–∏–º—É—î–º–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    keyboard = get_change_status_keyboard(order_id)

    await callback.message.edit_text(
        f"‚úèÔ∏è –û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}:",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("change_order_status:"))
async def change_order_status(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.

    Args:
        callback (CallbackQuery): –ó–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ callback_data
        _, order_id, new_status = callback.data.split(":")
        order_id = int(order_id)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        updated_order = await update_order_status(order_id, OrderStatus(new_status))

        if not updated_order:
            await callback.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = updated_order.tg_id  # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_description = OrderStatus(new_status).get_uk_description()
        notification_message = (
            f"–°—Ç–∞—Ç—É—Å –í–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {status_description}"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.bot.send_message(chat_id=user_id, text=notification_message)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
        articles = json.loads(updated_order.articles)
        items_text = "\n".join(
            [f"- {article}: {quantity} —à—Ç." for article, quantity in articles.items()]
        )

        order_details = (
            f"üì¶ <b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{updated_order.id}</b>:\n\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {updated_order.date.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üõí <b>–¢–æ–≤–∞—Ä–∏:</b>\n{items_text}\n\n"
            f"üí∞ <b>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {updated_order.total_price:.2f} –≥—Ä–Ω\n"
            f"üí≥ <b>–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b> {updated_order.payment_method}\n"
            f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {updated_order.delivery}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å–∞:</b> {updated_order.address}\n"
            f"üë§ <b>–û—Ç—Ä–∏–º—É–≤–∞—á:</b> {updated_order.name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {updated_order.phone}\n"
            f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus(updated_order.status).get_uk_description()}"
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
        keyboard = get_order_details_keyboard(order_id)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        await callback.message.edit_text(
            order_details,
            reply_markup=keyboard
        )

    except Exception as e:
        await callback.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)
