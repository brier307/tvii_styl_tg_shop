import json
from math import ceil
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, CommandStart, Command
from app.admin_keyboards import *
from app.database.requests import get_all_orders, get_orders_by_status, get_order

from config import ADMIN

admin = Router()
ORDERS_PER_PAGE = 10  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –æ–¥–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ


class Admin(Filter):
    def __init__(self):
        self.admins = ADMIN

    async def __call__(self, message: Message):
        return message.from_user.id in self.admins
    

@admin.message(F.text == "/menu")
async def cmd_menu(message: Message):
    await message.answer('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=get_admin_main_menu())


@admin.callback_query(F.data == "admin_main_menu")
async def show_admin_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await callback.message.edit_text(
        "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_main_menu()
    )


@admin.callback_query(F.data == "admin_orders_menu")
async def show_orders_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await callback.message.edit_text(
        "–ú–µ–Ω—é –∑–∞–º–æ–≤–ª–µ–Ω—å:",
        reply_markup=get_orders_menu_keyboard()
    )


@admin.callback_query(F.data == "admin_all_orders")
async def show_all_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    orders = await get_all_orders()

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=get_back_to_main_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_page:"))
async def process_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö —É—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."""
    orders = await get_all_orders()
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=keyboard
    )


@admin.callback_query(F.data == "admin_orders_status:new")
async def show_new_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new'."""
    orders = await get_orders_by_status("new")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_new_orders_page:"))
async def process_new_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new'."""
    orders = await get_orders_by_status("new")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:confirmed"))
async def show_confirmed_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'."""
    orders = await get_orders_by_status("confirmed")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_confirmed_orders_page:"))
async def process_confirmed_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'."""
    orders = await get_orders_by_status("confirmed")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:shipped"))
async def show_shipped_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("shipped")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üöö –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_shipped_orders_page:"))
async def process_shipped_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("shipped")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üöö –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:delivered"))
async def show_delivered_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("delivered")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_delivered_orders_page:"))
async def process_delivered_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'."""
    orders = await get_orders_by_status("delivered")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:cancelled_by_admin"))
async def show_cancelled_by_admin_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'."""
    orders = await get_orders_by_status("cancelled_by_admin")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_cancelled_by_admin_orders_page:"))
async def process_cancelled_by_admin_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'."""
    orders = await get_orders_by_status("cancelled_by_admin")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_orders_status:cancelled_by_user"))
async def show_cancelled_by_user_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º'."""
    orders = await get_orders_by_status("cancelled_by_user")

    if not orders:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º'.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_cancelled_by_user_orders_page:"))
async def process_cancelled_by_user_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º'."""
    orders = await get_orders_by_status("cancelled_by_user")
    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º':",
        reply_markup=keyboard
    )


@admin.callback_query(F.data.startswith("admin_order_details:"))
async def show_admin_order_details(callback: CallbackQuery):
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.
    """
    order_id = int(callback.data.split(":")[1])  # –û—Ç—Ä–∏–º—É—î–º–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ callback_data

    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order = await get_order(order_id)

    if not order:
        await callback.message.edit_text(
            "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    articles = json.loads(order.articles)
    items_text = "\n".join(
        [f"- {article}: {quantity} —à—Ç." for article, quantity in articles.items()]
    )

    order_details = (
        f"üì¶ <b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b>:\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {order.date.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"üõí <b>–¢–æ–≤–∞—Ä–∏:</b>\n{items_text}\n\n"
        f"üí≥ <b>–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b> {order.payment_method}\n"
        f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order.delivery}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å–∞:</b> {order.address}\n"
        f"üë§ <b>–û—Ç—Ä–∏–º—É–≤–∞—á:</b> {order.name}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}\n"
        f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus(order.status).get_uk_description()}"
    )

    await callback.message.edit_text(
        order_details,
        reply_markup=get_back_to_orders_menu()
    )
