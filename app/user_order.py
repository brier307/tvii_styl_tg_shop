import logging
import datetime
import re

from math import ceil
from aiogram import Router, F
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Optional

from app.database.models import DeliveryMethod
from app.database.requests import create_order, get_user_orders
from app.database.redis_cart import RedisCart
from app.database.products import ProductManager
from aiogram.filters.state import State, StatesGroup
from app.user_keyboards import get_orders_keyboard, get_back_to_main_menu


ORDERS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler('order_processing.log')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)


class OrderStates(StatesGroup):
    DELIVERY_METHOD = State()
    NOVA_POSHTA_CITY = State()
    NOVA_POSHTA_OFFICE = State()
    UKRPOSHTA_INDEX = State()
    RECIPIENT_NAME = State()
    PHONE_NUMBER = State()
    PAYMENT_METHOD = State()
    CONFIRMATION = State()


class OrderManager:
    def __init__(self, router: Router):
        self.router = router
        self.cart = RedisCart()
        self.product_manager = ProductManager()
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        # –ú–µ–Ω—è–µ–º "create_order" –Ω–∞ "checkout" –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        self.router.callback_query.register(
            self.start_order,
            F.data == "checkout"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π callback_data
        )
        self.router.callback_query.register(
            self.process_delivery_method,
            F.data.startswith("delivery_")
        )
        self.router.message.register(
            self.process_nova_poshta_city,
            OrderStates.NOVA_POSHTA_CITY
        )
        self.router.message.register(
            self.process_nova_poshta_office,
            OrderStates.NOVA_POSHTA_OFFICE
        )
        self.router.message.register(
            self.process_ukrposhta_index,
            OrderStates.UKRPOSHTA_INDEX
        )
        self.router.message.register(
            self.process_recipient_name,
            OrderStates.RECIPIENT_NAME
        )
        self.router.message.register(
            self.process_phone_number,
            OrderStates.PHONE_NUMBER
        )
        self.router.callback_query.register(
            self.process_payment_method,
            F.data.startswith("payment_")
        )
        self.router.callback_query.register(
            self.process_confirmation,
            F.data.in_({"confirm_order", "cancel_order"})
        )
        self.router.callback_query.register(
            self.process_back,
            F.data == "order_back"
        )
        self.router.callback_query.register(
            self.cancel_order,
            F.data == "order_cancel"
        )

    @staticmethod
    def create_delivery_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöö –ù–æ–≤–∞ –ü–æ—à—Ç–∞",
                                  callback_data="delivery_nova_poshta")],
            [InlineKeyboardButton(text="üì¨ –£–∫—Ä–ø–æ—à—Ç–∞",
                                  callback_data="delivery_ukrposhta")],
            [InlineKeyboardButton(text="üè™ –°–∞–º–æ–≤–∏–≤—ñ–∑",
                                  callback_data="delivery_self_pickup")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                                  callback_data="order_cancel")]
        ])
        return keyboard

    @staticmethod
    def create_payment_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞",
                                  callback_data="payment_online")],
            [InlineKeyboardButton(text="üíµ –ü—ñ—Å–ª—è–æ–ø–ª–∞—Ç–∞",
                                  callback_data="payment_cash")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                  callback_data="order_back")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                                  callback_data="order_cancel")]
        ])
        return keyboard

    @staticmethod
    def create_confirmation_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
                                     callback_data="confirm_order"),
                InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                                     callback_data="cancel_order")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                  callback_data="order_back")]
        ])
        return keyboard

    @staticmethod
    def create_back_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                  callback_data="order_back")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                                  callback_data="order_cancel")]
        ])
        return keyboard

    @staticmethod
    def validate_phone(phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        pattern = r'^\+?3?8?(0\d{9})$'
        return bool(re.match(pattern, phone))

    @staticmethod
    def validate_post_index(index: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ—á—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞"""
        return bool(re.match(r'^\d{5}$', index))

    async def format_order_details(self, user_id: int, state: FSMContext) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
        data = await state.get_data()
        cart_items = await self.cart.get_cart(user_id)

        total = 0
        items_text = []

        for article, quantity in cart_items.items():
            product_info = self.product_manager.get_product_info(article)
            if product_info:
                name, price, _ = product_info
                subtotal = price * quantity
                total += subtotal
                items_text.append(f"- {name} x{quantity} = {subtotal:.2f} –≥—Ä–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ enum –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        delivery_method_name = DeliveryMethod[data['delivery_method']].value

        details = [
            "üì¶ –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
            "\n–¢–æ–≤–∞—Ä–∏:",
            *items_text,
            f"\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total:.2f} –≥—Ä–Ω",
            f"\nüöö –°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method_name}",
            f"üìç –ê–¥—Ä–µ—Å–∞: {data.get('address', '')}",
            f"üë§ –û—Ç—Ä–∏–º—É–≤–∞—á: {data.get('name', '')}",
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '')}",
            f"üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {data.get('payment_method', '')}"
        ]

        return "\n".join(details)

    async def start_order(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        logger.info(f"Starting order process for user {callback.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_items = await self.cart.get_cart(callback.from_user.id)
        if not cart_items:
            logger.warning(f"User {callback.from_user.id} tried to create order with empty cart")
            await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return

        logger.debug(f"Cart items for user {callback.from_user.id}: {cart_items}")
        await state.set_state(OrderStates.DELIVERY_METHOD)
        await callback.message.edit_text(
            "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=self.create_delivery_keyboard()
        )

    async def process_delivery_method(self, callback: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.

        Args:
            callback (CallbackQuery): Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        user_id = callback.from_user.id
        delivery_method = callback.data.replace('delivery_', '')

        logger.info(f"User {user_id} selected delivery method: {delivery_method}")

        try:
            # –ú–∞–ø–ø–∏–Ω–≥ callback_data –≤ –∑–Ω–∞—á–µ–Ω–∏—è enum
            delivery_mapping = {
                'nova_poshta': {
                    'enum': DeliveryMethod.NOVA_POSHTA,
                    'next_state': OrderStates.NOVA_POSHTA_CITY,
                    'message': "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:"
                },
                'ukrposhta': {
                    'enum': DeliveryMethod.UKRPOSHTA,
                    'next_state': OrderStates.UKRPOSHTA_INDEX,
                    'message': "–í–≤–µ–¥—ñ—Ç—å –ø'—è—Ç–∏–∑–Ω–∞—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:"
                },
                'self_pickup': {
                    'enum': DeliveryMethod.SELF_PICKUP,
                    'next_state': OrderStates.RECIPIENT_NAME,
                    'message': "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:"
                }
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            if delivery_method not in delivery_mapping:
                logger.error(f"Invalid delivery method selected by user {user_id}: {delivery_method}")
                await callback.answer(
                    "–ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    show_alert=True
                )
                return

            selected_delivery = delivery_mapping[delivery_method]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ø–æ—Å–æ–±–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            await state.update_data({
                'delivery_method': selected_delivery['enum'].name,
                'delivery_display_name': selected_delivery['enum'].value
            })

            logger.debug(
                f"Saved delivery method for user {user_id}: "
                f"enum={selected_delivery['enum'].name}, "
                f"display_name={selected_delivery['enum'].value}"
            )

            # –î–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
            if delivery_method == 'self_pickup':
                await state.update_data(address="–°–∞–º–æ–≤–∏–≤—ñ–∑")
                logger.debug(f"Set self pickup address for user {user_id}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await state.set_state(selected_delivery['next_state'])

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="order_back"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                    callback_data="order_cancel"
                )]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            await callback.message.edit_text(
                text=selected_delivery['message'],
                reply_markup=keyboard
            )

            logger.info(
                f"Successfully processed delivery method for user {user_id}. "
                f"Next state: {selected_delivery['next_state']}"
            )

        except Exception as e:
            logger.error(
                f"Error processing delivery method for user {user_id}: {str(e)}",
                exc_info=True
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            error_message = (
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Å–ø–æ—Å–æ–±—É –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
            )

            try:
                await callback.message.edit_text(
                    text=error_message,
                    reply_markup=self.create_delivery_keyboard()
                )
            except Exception as edit_error:
                logger.error(
                    f"Error sending error message to user {user_id}: {str(edit_error)}",
                    exc_info=True
                )
                await callback.answer(
                    "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    show_alert=True
                )


    async def process_nova_poshta_city(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ù–æ–≤–æ–π –ü–æ—á—Ç—ã"""
        await state.update_data(nova_poshta_city=message.text.strip())
        await state.set_state(OrderStates.NOVA_POSHTA_OFFICE)
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:",
            reply_markup=self.create_back_keyboard()
        )

    async def process_nova_poshta_office(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ù–æ–≤–æ–π –ü–æ—á—Ç—ã"""
        office = message.text.strip()
        data = await state.get_data()
        city = data.get('nova_poshta_city', '')

        address = f"{city}, –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è {office}"
        await state.update_data(address=address)

        await state.set_state(OrderStates.RECIPIENT_NAME)
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:",
            reply_markup=self.create_back_keyboard()
        )

    async def process_ukrposhta_index(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω–¥–µ–∫—Å–∞ –£–∫—Ä–ø–æ—á—Ç—ã"""
        index = message.text.strip()

        if not self.validate_post_index(index):
            await message.answer(
                "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —ñ–Ω–¥–µ–∫—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø'—è—Ç–∏–∑–Ω–∞—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å:",
                reply_markup=self.create_back_keyboard()
            )
            return

        await state.update_data(address=f"–Ü–Ω–¥–µ–∫—Å: {index}")
        await state.set_state(OrderStates.RECIPIENT_NAME)
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:",
            reply_markup=self.create_back_keyboard()
        )

    async def process_recipient_name(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        name = message.text.strip()

        if len(name.split()) < 2:
            await message.answer(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ –ü–Ü–ë (–ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ):",
                reply_markup=self.create_back_keyboard()
            )
            return

        await state.update_data(name=name)
        await state.set_state(OrderStates.PHONE_NUMBER)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order_back")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="order_cancel")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:
        # 1. –° –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await message.answer(
            "üì± –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤—Ä—É—á–Ω—É:",
            reply_markup=contact_keyboard
        )

        # 2. –° –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await message.answer(
            "‚¨ÖÔ∏è –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
            reply_markup=inline_keyboard
        )

    async def process_phone_number(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            if message.contact:
                phone = message.contact.phone_number
            else:
                phone = message.text.strip()

            if not self.validate_phone(phone):
                await message.answer(
                    "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX",
                    reply_markup=self.create_back_keyboard()
                )
                return

            await state.update_data(phone=phone)
            await state.set_state(OrderStates.PAYMENT_METHOD)

            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
            await message.answer(
                "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
                reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            await message.answer(
                "–î–æ—Å—Ç—É–ø–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –æ–ø–ª–∞—Ç–∏:",
                reply_markup=self.create_payment_keyboard()
            )

        except Exception as e:
            print(f"Error in process_phone_number: {e}")
            await message.answer(
                "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=self.create_back_keyboard()
            )

    async def cancel_order(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await callback.message.answer(
            "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...",
            reply_markup=ReplyKeyboardRemove()
        )

    async def process_back(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥"""
        current_state = await state.get_state()

        # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Å —à–∞–≥–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        if current_state == OrderStates.PHONE_NUMBER.state:
            await callback.message.answer(
                "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É...",
                reply_markup=ReplyKeyboardRemove()
            )

        states_map = {
            OrderStates.NOVA_POSHTA_OFFICE: (OrderStates.NOVA_POSHTA_CITY,
                                             "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:"),
            OrderStates.RECIPIENT_NAME: (OrderStates.DELIVERY_METHOD,
                                         "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:"),
            OrderStates.PHONE_NUMBER: (OrderStates.RECIPIENT_NAME,
                                       "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:"),
            OrderStates.PAYMENT_METHOD: (OrderStates.PHONE_NUMBER,
                                         "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"),
            OrderStates.CONFIRMATION: (OrderStates.PAYMENT_METHOD,
                                       "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:")
        }

        if current_state in states_map:
            new_state, message_text = states_map[current_state]
            await state.set_state(new_state)
            await callback.message.edit_text(
                message_text,
                reply_markup=self.create_back_keyboard()
            )

    async def process_payment_method(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        payment_method = callback.data.replace('payment_', '')

        if payment_method == 'online':
            await callback.answer(
                "–ù–∞ –∂–∞–ª—å, –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏.",
                show_alert=True
            )
            return

        await state.update_data(payment_method='–ü—ñ—Å–ª—è–æ–ø–ª–∞—Ç–∞')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order_details = await self.format_order_details(
            callback.from_user.id,
            state
        )

        await callback.message.edit_text(
            f"{order_details}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
            reply_markup=self.create_confirmation_keyboard()
        )
        await state.set_state(OrderStates.CONFIRMATION)

    async def process_confirmation(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        user_id = callback.from_user.id
        logger.info(f"Processing order confirmation for user {user_id}")

        if callback.data == "confirm_order":
            try:
                data = await state.get_data()
                logger.debug(f"Order data for user {user_id}: {data}")

                cart_items = await self.cart.get_cart(user_id)
                logger.debug(f"Cart items for user {user_id}: {cart_items}")

                if not cart_items:
                    logger.error(f"Empty cart for user {user_id} during confirmation")
                    await callback.message.edit_text(
                        "‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º enum –ø–æ –∏–º–µ–Ω–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                delivery_method = DeliveryMethod[data['delivery_method']]
                logger.debug(f"Delivery method enum for user {user_id}: {delivery_method}")

                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                logger.info(f"Creating order in database for user {user_id}")
                order = await create_order(
                    tg_id=user_id,
                    articles=cart_items,
                    name=data['name'],
                    phone=data['phone'],
                    delivery=delivery_method,
                    address=data['address'],
                    payment_method=data['payment_method']
                )

                if order:
                    logger.info(f"Successfully created order #{order.id} for user {user_id}")
                    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                    await self.cart.clear_cart(user_id)
                    await callback.message.edit_text(
                        f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
                        "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
                    )
                else:
                    logger.error(f"Failed to create order for user {user_id}")
                    await callback.message.edit_text(
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
                        "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
                    )

            except Exception as e:
                logger.error(
                    f"Error during order confirmation for user {user_id}: {str(e)}",
                    exc_info=True
                )
                await callback.message.edit_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
                )

        await state.clear()
        logger.info(f"Cleared state for user {user_id}")


    async def process_back(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥"""
        current_state = await state.get_state()

        states_map = {
            OrderStates.NOVA_POSHTA_OFFICE: (OrderStates.NOVA_POSHTA_CITY,
                                             "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:"),
            OrderStates.RECIPIENT_NAME: (OrderStates.DELIVERY_METHOD,
                                         "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:"),
            OrderStates.PHONE_NUMBER: (OrderStates.RECIPIENT_NAME,
                                       "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:"),
            OrderStates.PAYMENT_METHOD: (OrderStates.PHONE_NUMBER,
                                         "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"),
            OrderStates.CONFIRMATION: (OrderStates.PAYMENT_METHOD,
                                       "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:")
        }


        if current_state in states_map:
            new_state, message_text = states_map[current_state]
            await state.set_state(new_state)
            await callback.message.edit_text(
                message_text,
                reply_markup=self.create_back_keyboard()
            )

    async def cancel_order(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        await state.clear()
        await callback.message.edit_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")


async def process_show_orders(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id
    orders = await get_user_orders(user_id)

    if not orders:
        await callback.message.edit_text(
            "‚ùå –í–∏ —â–µ –Ω–µ –º–∞—î—Ç–µ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=get_back_to_main_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=keyboard
    )


async def process_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∑–∞–∫–∞–∑–æ–≤."""
    user_id = callback.from_user.id
    orders = await get_user_orders(user_id)

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=keyboard
    )