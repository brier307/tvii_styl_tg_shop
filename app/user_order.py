import logging
import datetime
import re
import json

from math import ceil
from aiogram import Router, F
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Optional

from app.database.models import DeliveryMethod, OrderStatus
from app.database.requests import create_order, get_user_orders, get_order
from app.database.redis_cart import RedisCart
from app.database.products import ProductManager
from aiogram.filters.state import State, StatesGroup
from app.user_keyboards import get_orders_keyboard, get_back_to_main_menu, get_back_to_orders_menu

from config import ADMIN

ORDERS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler('order_processing.log')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)


class OrderStates(StatesGroup):
    DELIVERY_METHOD = State()
    NOVA_POSHTA_CITY = State()
    NOVA_POSHTA_OFFICE = State()
    UKRPOSHTA_INDEX = State()
    RECIPIENT_NAME = State()
    PHONE_NUMBER = State()
    COMMENT = State()
    PAYMENT_METHOD = State()
    CONFIRMATION = State()


class OrderManager:
    def __init__(self, router: Router):
        self.router = router
        self.cart = RedisCart()
        self.product_manager = ProductManager()
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        # –ú–µ–Ω—è–µ–º "create_order" –Ω–∞ "checkout" –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        self.router.callback_query.register(
            self.start_order,
            F.data == "checkout"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π callback_data
        )
        self.router.callback_query.register(
            self.process_delivery_method,
            F.data.startswith("delivery_")
        )
        self.router.message.register(
            self.process_nova_poshta_city,
            OrderStates.NOVA_POSHTA_CITY
        )
        self.router.message.register(
            self.process_nova_poshta_office,
            OrderStates.NOVA_POSHTA_OFFICE
        )
        self.router.message.register(
            self.process_ukrposhta_index,
            OrderStates.UKRPOSHTA_INDEX
        )
        self.router.message.register(
            self.process_recipient_name,
            OrderStates.RECIPIENT_NAME
        )
        self.router.message.register(
            self.process_phone_number,
            OrderStates.PHONE_NUMBER
        )
        self.router.message.register(  # Register handler for the new comment step
            self.process_comment,
            OrderStates.COMMENT
        )
        self.router.callback_query.register(
            self.skip_comment_handler,
            OrderStates.COMMENT,  # –í–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            F.data == "skip_comment"
        )
        self.router.callback_query.register(
            self.process_payment_method,
            F.data.startswith("payment_")
        )
        self.router.callback_query.register(
            self.process_confirmation,
            F.data.in_({"confirm_order", "cancel_order"})
        )
        self.router.callback_query.register(
            self.process_back,
            F.data == "order_back"
        )
        self.router.callback_query.register(
            self.cancel_order,
            F.data == "order_cancel"
        )

    @staticmethod
    def create_delivery_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöö –ù–æ–≤–∞ –ü–æ—à—Ç–∞",
                                  callback_data="delivery_nova_poshta")],
            [InlineKeyboardButton(text="üì¨ –£–∫—Ä–ø–æ—à—Ç–∞",
                                  callback_data="delivery_ukrposhta")],
            [InlineKeyboardButton(text="üè™ –°–∞–º–æ–≤–∏–≤—ñ–∑",
                                  callback_data="delivery_self_pickup")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                                  callback_data="order_cancel")]
        ])
        return keyboard

    @staticmethod
    def create_payment_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞",
                                  callback_data="payment_online")],
            [InlineKeyboardButton(text="üíµ –ü—ñ—Å–ª—è–æ–ø–ª–∞—Ç–∞",
                                  callback_data="payment_cash")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                  callback_data="order_back")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                                  callback_data="order_cancel")]
        ])
        return keyboard

    @staticmethod
    def create_confirmation_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
                                     callback_data="confirm_order"),
                InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                                     callback_data="cancel_order")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                  callback_data="order_back")]
        ])
        return keyboard

    @staticmethod
    def create_back_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                  callback_data="order_back")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                                  callback_data="order_cancel")]
        ])
        return keyboard

    @staticmethod
    def create_comment_navigation_keyboard() -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –Ω–∞ –∫—Ä–æ—Ü—ñ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º."""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_comment")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order_back")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="order_cancel")]
        ])

    @staticmethod
    def validate_phone(phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        pattern = r'^\+?3?8?(0\d{9})$'
        return bool(re.match(pattern, phone))

    @staticmethod
    def validate_post_index(index: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ—á—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞"""
        return bool(re.match(r'^\d{5}$', index))

    async def format_order_details(self, user_id: int, state: FSMContext) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
        data = await state.get_data()
        cart_items = await self.cart.get_cart(user_id)

        total = 0
        items_text = []

        for article, quantity in cart_items.items():
            product_info = self.product_manager.get_product_info(article)
            if product_info:
                name, price, _ = product_info
                subtotal = price * quantity
                total += subtotal
                items_text.append(f"- {name} x{quantity} = {subtotal:.2f} –≥—Ä–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ enum –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        delivery_method_name = DeliveryMethod[data['delivery_method']].value

        details = [
            "üì¶ –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
            "\n–¢–æ–≤–∞—Ä–∏:",
            *items_text,
            f"\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total:.2f} –≥—Ä–Ω",
            f"\nüöö –°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method_name}",
            f"üìç –ê–¥—Ä–µ—Å–∞: {data.get('address', '')}",
            f"üë§ –û—Ç—Ä–∏–º—É–≤–∞—á: {data.get('name', '')}",
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '')}",
            f"üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {data.get('payment_method', '')}"
        ]

        return "\n".join(details)

    async def start_order(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        logger.info(f"Starting order process for user {callback.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_items = await self.cart.get_cart(callback.from_user.id)
        if not cart_items:
            logger.warning(f"User {callback.from_user.id} tried to create order with empty cart")
            await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return

        logger.debug(f"Cart items for user {callback.from_user.id}: {cart_items}")
        await state.set_state(OrderStates.DELIVERY_METHOD)
        await callback.message.edit_text(
            "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=self.create_delivery_keyboard()
        )

    async def process_delivery_method(self, callback: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.

        Args:
            callback (CallbackQuery): Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        user_id = callback.from_user.id
        delivery_method = callback.data.replace('delivery_', '')

        logger.info(f"User {user_id} selected delivery method: {delivery_method}")

        try:
            # –ú–∞–ø–ø–∏–Ω–≥ callback_data –≤ –∑–Ω–∞—á–µ–Ω–∏—è enum
            delivery_mapping = {
                'nova_poshta': {
                    'enum': DeliveryMethod.NOVA_POSHTA,
                    'next_state': OrderStates.NOVA_POSHTA_CITY,
                    'message': "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:"
                },
                'ukrposhta': {
                    'enum': DeliveryMethod.UKRPOSHTA,
                    'next_state': OrderStates.UKRPOSHTA_INDEX,
                    'message': "–í–≤–µ–¥—ñ—Ç—å –ø'—è—Ç–∏–∑–Ω–∞—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:"
                },
                'self_pickup': {
                    'enum': DeliveryMethod.SELF_PICKUP,
                    'next_state': OrderStates.RECIPIENT_NAME,
                    'message': "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:"
                }
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            if delivery_method not in delivery_mapping:
                logger.error(f"Invalid delivery method selected by user {user_id}: {delivery_method}")
                await callback.answer(
                    "–ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    show_alert=True
                )
                return

            selected_delivery = delivery_mapping[delivery_method]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ø–æ—Å–æ–±–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            await state.update_data({
                'delivery_method': selected_delivery['enum'].name,
                'delivery_display_name': selected_delivery['enum'].value
            })

            logger.debug(
                f"Saved delivery method for user {user_id}: "
                f"enum={selected_delivery['enum'].name}, "
                f"display_name={selected_delivery['enum'].value}"
            )

            # –î–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
            if delivery_method == 'self_pickup':
                await state.update_data(address="–°–∞–º–æ–≤–∏–≤—ñ–∑")
                logger.debug(f"Set self pickup address for user {user_id}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await state.set_state(selected_delivery['next_state'])

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="order_back"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                    callback_data="order_cancel"
                )]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            await callback.message.edit_text(
                text=selected_delivery['message'],
                reply_markup=keyboard
            )

            logger.info(
                f"Successfully processed delivery method for user {user_id}. "
                f"Next state: {selected_delivery['next_state']}"
            )

        except Exception as e:
            logger.error(
                f"Error processing delivery method for user {user_id}: {str(e)}",
                exc_info=True
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            error_message = (
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Å–ø–æ—Å–æ–±—É –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
            )

            try:
                await callback.message.edit_text(
                    text=error_message,
                    reply_markup=self.create_delivery_keyboard()
                )
            except Exception as edit_error:
                logger.error(
                    f"Error sending error message to user {user_id}: {str(edit_error)}",
                    exc_info=True
                )
                await callback.answer(
                    "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    show_alert=True
                )

    async def process_nova_poshta_city(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ù–æ–≤–æ–π –ü–æ—á—Ç—ã"""
        await state.update_data(nova_poshta_city=message.text.strip())
        await state.set_state(OrderStates.NOVA_POSHTA_OFFICE)
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:",
            reply_markup=self.create_back_keyboard()
        )

    async def process_nova_poshta_office(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ù–æ–≤–æ–π –ü–æ—á—Ç—ã"""
        office = message.text.strip()
        data = await state.get_data()
        city = data.get('nova_poshta_city', '')

        address = f"{city}, –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è {office}"
        await state.update_data(address=address)

        await state.set_state(OrderStates.RECIPIENT_NAME)
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:",
            reply_markup=self.create_back_keyboard()
        )

    async def process_ukrposhta_index(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω–¥–µ–∫—Å–∞ –£–∫—Ä–ø–æ—á—Ç—ã"""
        index = message.text.strip()

        if not self.validate_post_index(index):
            await message.answer(
                "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —ñ–Ω–¥–µ–∫—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø'—è—Ç–∏–∑–Ω–∞—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å:",
                reply_markup=self.create_back_keyboard()
            )
            return

        await state.update_data(address=f"–Ü–Ω–¥–µ–∫—Å: {index}")
        await state.set_state(OrderStates.RECIPIENT_NAME)
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:",
            reply_markup=self.create_back_keyboard()
        )

    async def process_recipient_name(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        name = message.text.strip()

        if len(name.split()) < 2:
            await message.answer(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ –ü–Ü–ë (–ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ):",
                reply_markup=self.create_back_keyboard()
            )
            return

        await state.update_data(name=name)
        await state.set_state(OrderStates.PHONE_NUMBER)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order_back")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="order_cancel")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:
        # 1. –° –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await message.answer(
            "üì± –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤—Ä—É—á–Ω—É:",
            reply_markup=contact_keyboard
        )

        # 2. –° –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await message.answer(
            "‚¨ÖÔ∏è –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
            reply_markup=inline_keyboard
        )

    async def process_phone_number(self, message: Message, state: FSMContext):
        """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
        try:
            if message.contact:
                phone = message.contact.phone_number
            else:
                phone = message.text.strip()

            if not self.validate_phone(phone):
                await message.answer(
                    "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. "
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX:",
                    reply_markup=self.create_back_keyboard()  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                )
                return

            await state.update_data(phone=phone)
            await state.set_state(OrderStates.COMMENT)

            cart_items = await self.cart.get_cart(message.from_user.id)
            items_text_list = []
            if cart_items:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
                for article, quantity in cart_items.items():  # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                    product_data = self.product_manager.get_product_details(article)
                    if product_data:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        item_desc = f"üì¶ {product_data['name']}"
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∏–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–µ–ø—É—Å—Ç–∞—è
                        if product_data["specifications"] and \
                                (len(product_data["specifications"]) > 1 or product_data["specifications"][0][
                                    'specification']):
                            specs_texts = [spec['specification'] for spec in product_data["specifications"] if
                                           spec['specification']]
                            if specs_texts:
                                item_desc += f" ({', '.join(specs_texts)})"
                        item_desc += f" - {quantity} —à—Ç."
                        items_text_list.append(item_desc)

            items_text_for_message = "\n".join(items_text_list)
            prompt_message = "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —É—Ç–æ—á–Ω–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É/—Ä–æ–∑–º—ñ—Ä—É) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'."
            if items_text_for_message:
                prompt_message = f"–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:\n{items_text_for_message}\n\n{prompt_message}"

            # –£–±–∏—Ä–∞–µ–º ReplyKeyboardRemove, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º Inline –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            await message.answer(
                text=prompt_message,
                reply_markup=self.create_comment_navigation_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –±—ã–ª–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –µ–µ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å
            await message.answer("‚Üì", reply_markup=ReplyKeyboardRemove())


        except Exception as e:
            logger.error(f"Error in process_phone_number: {e}", exc_info=True)
            await message.answer(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É (–≤–≤–æ–¥ –∏–º–µ–Ω–∏)
                # –∏–ª–∏ –æ–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã/–≤–æ–∑–≤—Ä–∞—Ç–∞
                reply_markup=self.create_back_keyboard()
            )

    async def process_comment(self, message: Message, state: FSMContext):
        """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (—Ç–µ–∫—Å—Ç–æ–º)."""
        try:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–µ–∫—Å—Ç–æ–º
            comment_text = message.text.strip()
            logger.info(f"User {message.from_user.id} entered comment: {comment_text}")
            await state.update_data(comment=comment_text) # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è

            await state.set_state(OrderStates.PAYMENT_METHOD)
            await message.answer( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ç.–∫. –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                "–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
                reply_markup=self.create_payment_keyboard()
            )
        except Exception as e:
            logger.error(f"Error in process_comment: {e}", exc_info=True)
            await message.answer(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=self.create_comment_navigation_keyboard() # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
            )

    async def skip_comment(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è."""
        try:
            logger.info(f"User {callback.from_user.id} skipped comment entry")

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä
            await state.update_data(comment="")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
            await state.set_state(OrderStates.PAYMENT_METHOD)

            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
            await callback.message.edit_text(
                "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
                reply_markup=self.create_payment_keyboard()
            )

        except Exception as e:
            logger.error(f"Error in skip_comment: {e}", exc_info=True)
            await callback.message.edit_text(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=self.create_back_keyboard()
            )

    async def cancel_order(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await callback.message.answer(
            "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...",
            reply_markup=ReplyKeyboardRemove()
        )

    async def process_back(self, callback: CallbackQuery, state: FSMContext):
        """Handles returning to the previous step"""
        current_state_str = await state.get_state()
        user_id = callback.from_user.id
        logger.info(f"User {user_id} triggered 'Back' from state: {current_state_str}")

        current_state = None
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if current_state_str == OrderStates.DELIVERY_METHOD.state:
            current_state = OrderStates.DELIVERY_METHOD  # –•–æ—Ç—è —Å—é–¥–∞ –º—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∏–∑ —ç—Ç–æ–≥–æ FSM
        elif current_state_str == OrderStates.NOVA_POSHTA_CITY.state:
            current_state = OrderStates.NOVA_POSHTA_CITY
        elif current_state_str == OrderStates.NOVA_POSHTA_OFFICE.state:
            current_state = OrderStates.NOVA_POSHTA_OFFICE
        elif current_state_str == OrderStates.UKRPOSHTA_INDEX.state:
            current_state = OrderStates.UKRPOSHTA_INDEX
        elif current_state_str == OrderStates.RECIPIENT_NAME.state:
            current_state = OrderStates.RECIPIENT_NAME
        elif current_state_str == OrderStates.PHONE_NUMBER.state:
            current_state = OrderStates.PHONE_NUMBER
        elif current_state_str == OrderStates.COMMENT.state:
            current_state = OrderStates.COMMENT
        elif current_state_str == OrderStates.PAYMENT_METHOD.state:
            current_state = OrderStates.PAYMENT_METHOD
        elif current_state_str == OrderStates.CONFIRMATION.state:
            current_state = OrderStates.CONFIRMATION

        if current_state is None and current_state_str is not None:
            logger.warning(f"User {user_id} back from an unknown state string: {current_state_str}")
            await state.clear()
            await callback.message.edit_text(
                "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...",
                reply_markup=get_back_to_main_menu()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
            )
            await callback.answer()
            return
        elif current_state is None and current_state_str is None:
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –æ—á–∏—â–µ–Ω–æ –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            logger.info(f"User {user_id} back from a cleared state. To main menu.")
            await callback.message.edit_text(
                "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...",
                reply_markup=get_back_to_main_menu()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
            )
            await callback.answer()
            return

        states_map = {
            OrderStates.NOVA_POSHTA_CITY: {
                "state": OrderStates.DELIVERY_METHOD,
                "message": "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
                "keyboard": self.create_delivery_keyboard()
            },
            OrderStates.NOVA_POSHTA_OFFICE: {
                "state": OrderStates.NOVA_POSHTA_CITY,
                "message": "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:",
                "keyboard": self.create_back_keyboard()
            },
            OrderStates.UKRPOSHTA_INDEX: {
                "state": OrderStates.DELIVERY_METHOD,
                "message": "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
                "keyboard": self.create_delivery_keyboard()
            },
            OrderStates.RECIPIENT_NAME: {  # –ù–∞–∑–∞–¥ —Å –≤–≤–æ–¥–∞ –§–ò–û
                "state": OrderStates.DELIVERY_METHOD,  # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–≥—É –∞–¥—Ä–µ—Å–∞)
                # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫—É–¥–∞ –ª–æ–≥–∏—á–Ω–µ–µ. –°–µ–π—á–∞—Å - –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏.
                # –ï—Å–ª–∏ –±—ã–ª —Å–∞–º–æ–≤—ã–≤–æ–∑, —Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
                # –ï—Å–ª–∏ –ù–ü/–£–ü, —Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –∞–¥—Ä–µ—Å–∞.
                # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è - –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏.
                "message": "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
                "keyboard": self.create_delivery_keyboard()
            },
            OrderStates.PHONE_NUMBER: {  # –ù–∞–∑–∞–¥ —Å –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                "state": OrderStates.RECIPIENT_NAME,
                "message": "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:",
                "keyboard": self.create_back_keyboard()
            },
            OrderStates.COMMENT: {  # –ù–∞–∑–∞–¥ —Å –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                "state": OrderStates.PHONE_NUMBER,
                "message": "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É...",
                # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ, —Ç.–∫. √∂zel i≈ülem
                "keyboard": None  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –±—É–¥–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            },
            OrderStates.PAYMENT_METHOD: {  # –ù–∞–∑–∞–¥ —Å –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
                "state": OrderStates.COMMENT,
                "message": "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —É—Ç–æ—á–Ω–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É/—Ä–æ–∑–º—ñ—Ä—É) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':",
                "keyboard": self.create_comment_navigation_keyboard()
            },
            OrderStates.CONFIRMATION: {  # –ù–∞–∑–∞–¥ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                "state": OrderStates.PAYMENT_METHOD,
                "message": "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
                "keyboard": self.create_payment_keyboard()
            }
        }

        if current_state in states_map:
            config = states_map[current_state]
            new_state = config["state"]
            message_text = config["message"]
            keyboard = config["keyboard"]

            await state.set_state(new_state)
            logger.info(f"User {user_id} state set to {new_state.state if hasattr(new_state, 'state') else new_state}")

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if new_state == OrderStates.PHONE_NUMBER and current_state == OrderStates.COMMENT:
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    await callback.message.delete()
                except Exception as e:
                    logger.warning(f"Could not delete message on back to phone input: {e}")

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                contact_keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
                    ],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —à–∞–≥–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ù–∞–∑–∞–¥ –∫ –§–ò–û, –û—Ç–º–µ–Ω–∞)
                phone_step_nav_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order_back")],
                    # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–≤–µ–¥–µ—Ç —Å PHONE_NUMBER –Ω–∞ RECIPIENT_NAME
                    [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="order_cancel")]
                ])

                await callback.message.answer(  # –ò—Å–ø–æ–ª—å–∑—É–µ–º answer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    "üì± –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤—Ä—É—á–Ω—É:",
                    reply_markup=contact_keyboard
                )
                await callback.message.answer(  # –ò—Å–ø–æ–ª—å–∑—É–µ–º answer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    "‚¨ÖÔ∏è –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
                    reply_markup=phone_step_nav_keyboard
                )
                await callback.answer()
                return  # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å edit_text –Ω–∏–∂–µ

            # –ï—Å–ª–∏ –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –° —à–∞–≥–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –≤–≤–æ–¥ –§–ò–û),
            # –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
            if current_state == OrderStates.PHONE_NUMBER:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboardRemove, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
                    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∏–¥–µ–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—Å–ø–µ–ª —á—Ç–æ-—Ç–æ –Ω–∞–∂–∞—Ç—å.
                    # –õ—É—á—à–µ –≤—Å–µ–≥–æ, –µ—Å–ª–∏ `process_recipient_name` –≤—Å–µ–≥–¥–∞ —É–±–∏—Ä–∞–µ—Ç ReplyKeyboard –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
                    # –ù–æ –¥–ª—è —è–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ:
                    await callback.message.answer(" ",
                                                  reply_markup=ReplyKeyboardRemove())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    # –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
                    logger.info(f"Removed reply keyboard when moving back from PHONE_NUMBER for user {user_id}")
                except Exception as e:
                    logger.warning(f"Could not send ReplyKeyboardRemove message: {e}")

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ "–ù–∞–∑–∞–¥"
            try:
                await callback.message.edit_text(
                    message_text,
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(
                    f"Error editing message on back for user {user_id} to state {new_state.state if hasattr(new_state, 'state') else new_state}: {e}")
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(message_text, reply_markup=keyboard)

            logger.info(
                f"User {user_id} successfully returned to state: {new_state.state if hasattr(new_state, 'state') else new_state}")

        else:
            logger.warning(f"User {user_id} attempted to go back from an unhandled state: {current_state_str}")
            await state.clear()
            await callback.message.edit_text(
                "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...",
                reply_markup=get_back_to_main_menu()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
            )
        await callback.answer()

    async def skip_comment_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
        try:
            logger.info(f"User {callback.from_user.id} chose to skip the comment step via button.")
            await state.update_data(comment="")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await state.set_state(OrderStates.PAYMENT_METHOD)
            await callback.message.edit_text(
                "–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
                reply_markup=self.create_payment_keyboard()
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"Error in skip_comment_handler: {e}", exc_info=True)
            await callback.message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            await callback.answer("–ü–æ–º–∏–ª–∫–∞")

    async def process_payment_method(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        payment_method = callback.data.replace('payment_', '')

        if payment_method == 'online':
            await callback.answer(
                "–ù–∞ –∂–∞–ª—å, –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏.",
                show_alert=True
            )
            return

        await state.update_data(payment_method='–ü—ñ—Å–ª—è–æ–ø–ª–∞—Ç–∞')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order_details = await self.format_order_details(
            callback.from_user.id,
            state
        )

        await callback.message.edit_text(
            f"{order_details}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
            reply_markup=self.create_confirmation_keyboard()
        )
        await state.set_state(OrderStates.CONFIRMATION)

    async def process_confirmation(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        user_id = callback.from_user.id
        logger.info(f"Processing order confirmation for user {user_id}")

        if callback.data == "confirm_order":
            try:
                data = await state.get_data()
                logger.debug(f"Order data for user {user_id}: {data}")

                cart_items = await self.cart.get_cart(user_id)
                logger.debug(f"Cart items for user {user_id}: {cart_items}")

                if not cart_items:
                    logger.error(f"Empty cart for user {user_id} during confirmation")
                    await callback.message.edit_text(
                        "‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º enum –ø–æ –∏–º–µ–Ω–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                delivery_method = DeliveryMethod[data['delivery_method']]
                comment_text = data.get('comment')  # <-- –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

                logger.info(f"Creating order in database for user {user_id}")
                order = await create_order(
                    tg_id=user_id,
                    articles=cart_items,
                    name=data['name'],
                    phone=data['phone'],
                    delivery=delivery_method,
                    address=data['address'],
                    payment_method=data['payment_method'],
                    comment=comment_text  # <-- –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                )

                if order:
                    logger.info(f"Successfully created order #{order.id} for user {user_id}")

                    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                    await self.cart.clear_cart(user_id)

                    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                    await callback.message.edit_text(
                        f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
                        "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
                    )

                    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                    admin_message = (
                        f"üì¶ <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b>\n"
                        f"üìÖ <b>–î–∞—Ç–∞:</b> {order.date.strftime('%Y-%m-%d %H:%M:%S')}\n"
                    )

                    for admin_id in ADMIN:
                        try:
                            await callback.bot.send_message(chat_id=admin_id, text=admin_message, parse_mode="HTML")
                        except Exception as e:
                            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {str(e)}")
                else:
                    logger.error(f"Failed to create order for user {user_id}")
                    await callback.message.edit_text(
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
                        "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
                    )

            except Exception as e:
                logger.error(
                    f"Error during order confirmation for user {user_id}: {str(e)}",
                    exc_info=True
                )
                await callback.message.edit_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
                )

        await state.clear()
        logger.info(f"Cleared state for user {user_id}")


async def process_show_orders(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id
    orders = await get_user_orders(user_id)

    if not orders:
        await callback.message.edit_text(
            "‚ùå –í–∏ —â–µ –Ω–µ –º–∞—î—Ç–µ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=get_back_to_main_menu()
        )
        return

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = 1

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=keyboard
    )


async def process_orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∑–∞–∫–∞–∑–æ–≤."""
    user_id = callback.from_user.id
    orders = await get_user_orders(user_id)

    total_pages = ceil(len(orders) / ORDERS_PER_PAGE)
    page = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start = (page - 1) * ORDERS_PER_PAGE
    end = start + ORDERS_PER_PAGE
    orders_on_page = orders[start:end]

    keyboard = get_orders_keyboard(orders_on_page, page, total_pages)

    await callback.message.edit_text(
        "üì¶ –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=keyboard
    )


async def show_order_details(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    user_id = callback.from_user.id
    order_id = int(callback.data.split(":")[1])  # –û—Ç—Ä–∏–º—É—î–º–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ callback_data

    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order = await get_order(order_id)

    if not order or order.tg_id != user_id:
        await callback.message.edit_text(
            "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=get_back_to_orders_menu()
        )
        return

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    articles = json.loads(order.articles)
    items_text = "\n".join(
        [f"- {article}: {quantity} —à—Ç." for article, quantity in articles.items()]
    )

    order_details = (
        f"üì¶ –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}:\n\n"
        f"üìÖ –î–∞—Ç–∞: {order.date.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"üõí –¢–æ–≤–∞—Ä–∏:\n{items_text}\n\n"
        f"üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {order.payment_method}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {order.address}\n"
        f"üë§ –û—Ç—Ä–∏–º—É–≤–∞—á: {order.name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {OrderStatus(order.status).get_uk_description()}"
    )

    await callback.message.edit_text(
        order_details,
        reply_markup=get_back_to_orders_menu()
    )


